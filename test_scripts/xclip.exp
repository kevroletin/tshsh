#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Aug 16 11:38:30 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn stack run tshsh -- sh python
match_max 100000
expect -exact "sh-4.4\$ "
send -- "echo \"value from sh\"\r"
expect -exact "echo \"value from sh\"\r
value from sh\r
sh-4.4\$ "
send -- "\x1a"
expect -exact "\r
Starting \"python3\" ..\r

\[J\[2K\[APython 3.6.9 (default, Jan 26 2021, 15:33:00) \r
\[GCC 8.4.0\] on linux\r
Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r
>>> "
send -- "os."
expect -exact ""
send -- ""
expect -exact "\[K"
send -- "import os\r"
expect -exact "import os\r
>>> "
send -- "os.system(\"xclip -o -selection clipboard\")\r"
expect -exact "os.system(\"xclip -o -selection clipboard\")\r
value from sh0\r
>>> "
send -- "\"value from python\"\r"
expect -exact "\"value from python\"\r
'value from python'\r
>>> "
send -- "\x1a"
expect -exact "\[J\[2K\[A\r
sh-4.4\$ "
# This is a race condition between expect and tshsh; bot
# are waiting for a prompt to execute and action afterwards
sleep 0.5
send -- "xclip -o -selection clipboard\r"
expect -exact "xclip -o -selection clipboard\r
'value from python'sh-4.4\$ "
send -- ""
expect -exact "exit\r
\[J\[2K\[A\r
>>> "
send -- ""
expect eof
